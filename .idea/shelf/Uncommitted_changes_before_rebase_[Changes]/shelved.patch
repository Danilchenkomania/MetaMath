Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox\r\nimport math\r\nimport time\r\n\r\nclass MetaMathCalculator:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"MetaMath 2.0 - Простой калькулятор (обновленная версия)\")\r\n        self.root.geometry(\"550x400\")  # Уменьшен размер\r\n        self.root.configure(bg=\"#e0eafc\")  # Градиентный фон\r\n        self.root.resizable(True, True)\r\n\r\n        self.num1_var = tk.StringVar()\r\n        self.num2_var = tk.StringVar()\r\n        self.operation_var = tk.StringVar(value=\"+\")\r\n        self.step_by_step_var = tk.StringVar(value=\"\")\r\n\r\n        self.create_gui_elements()\r\n\r\n    def create_gui_elements(self):\r\n        # Основной фрейм для центрирования\r\n        main_frame = tk.Frame(self.root, bg=\"#e0eafc\")\r\n        main_frame.place(relx=0.5, rely=0.5, anchor=\"center\")\r\n\r\n        # Заголовок\r\n        title_label = tk.Label(main_frame, text=\"MetaMath 2.0\", font=(\"Arial\", 22, \"bold\"), bg=\"#e0eafc\", fg=\"#1a237e\")\r\n        title_label.pack(pady=15)\r\n\r\n        # Ввод первого числа (только цифры)\r\n        tk.Label(main_frame, text=\"Первое число:\", font=(\"Arial\", 12), bg=\"#e0eafc\").pack()\r\n        self.num1_entry = tk.Entry(main_frame, textvariable=self.num1_var, width=35, font=(\"Arial\", 12))\r\n        self.num1_entry.config(validate=\"key\", validatecommand=(self.root.register(self.validate_numeric), \"%P\"))\r\n        self.num1_entry.pack(pady=5)\r\n\r\n        # Ввод второго числа (только цифры)\r\n        tk.Label(main_frame, text=\"Второе число:\", font=(\"Arial\", 12), bg=\"#e0eafc\").pack()\r\n        self.num2_entry = tk.Entry(main_frame, textvariable=self.num2_var, width=35, font=(\"Arial\", 12))\r\n        self.num2_entry.config(validate=\"key\", validatecommand=(self.root.register(self.validate_numeric), \"%P\"))\r\n        self.num2_entry.pack(pady=5)\r\n\r\n        # Выбор операции\r\n        tk.Label(main_frame, text=\"Выберите операцию:\", font=(\"Arial\", 12), bg=\"#e0eafc\").pack(pady=(15, 5))\r\n        op_frame = tk.Frame(main_frame, bg=\"#e0eafc\")\r\n        op_frame.pack()\r\n        operations = [\r\n            (\"Плюс (+)\", \"+\"),\r\n            (\"Минус (-)\", \"-\"),\r\n            (\"Умножение (*)\", \"*\"),\r\n            (\"Деление (/)\", \"/\"),\r\n            (\"Степень (**)\", \"**\"),\r\n            (\"Процент (%)\", \"%\"),\r\n            (\"Корень (sqrt)\", \"sqrt\"),\r\n            (\"Кубический корень (cbrt)\", \"cbrt\"),\r\n            (\"Тангенс (tan)\", \"tan\"),\r\n            (\"Логарифм (log)\", \"log\"),\r\n            (\"Модуль (abs)\", \"abs\")\r\n        ]\r\n        for text, value in operations:\r\n            tk.Radiobutton(op_frame, text=text, variable=self.operation_var, value=value,\r\n                          font=(\"Arial\", 10), command=self.update_input_field).pack(side=tk.LEFT, padx=5)\r\n\r\n        # Кнопки\r\n        button_frame = tk.Frame(main_frame, bg=\"#e0eafc\")\r\n        button_frame.pack(pady=20)\r\n        tk.Button(button_frame, text=\"Вычислить\", command=self.perform_calculation, bg=\"#42a5f5\", fg=\"white\", width=12).pack(side=tk.LEFT, padx=5)\r\n        tk.Button(button_frame, text=\"Новый расчёт\", command=self.reset_calculator, bg=\"#66bb6a\", fg=\"white\", width=12).pack(side=tk.LEFT, padx=5)\r\n        tk.Button(button_frame, text=\"Выход\", command=self.exit_application, bg=\"#ef5350\", fg=\"white\", width=12).pack(side=tk.LEFT, padx=5)\r\n\r\n        # Результат и пояснения\r\n        self.result_label = tk.Label(main_frame, text=\"Результат: \", font=(\"Arial\", 14), bg=\"#e0eafc\", fg=\"#1a237e\")\r\n        self.result_label.pack(pady=10)\r\n        self.step_label = tk.Label(main_frame, textvariable=self.step_by_step_var, font=(\"Arial\", 10), bg=\"#e0eafc\", fg=\"#27ae60\", wraplength=500)\r\n        self.step_label.pack(pady=5)\r\n\r\n        # Метка для ошибок\r\n        self.error_label = tk.Label(main_frame, text=\"\", font=(\"Arial\", 10), bg=\"#e0eafc\", fg=\"red\")\r\n        self.error_label.pack(pady=5)\r\n\r\n    def validate_numeric(self, new_value):\r\n        # Проверка ввода только цифр и точки\r\n        if new_value == \"\":\r\n            return True\r\n        return new_value.replace(\".\", \"\").replace(\"-\", \"\").isdigit() and new_value.count(\".\") <= 1 and new_value.count(\"-\") <= 1\r\n\r\n    def update_input_field(self):\r\n        op = self.operation_var.get()\r\n        if op in [\"sqrt\", \"cbrt\", \"tan\", \"log\", \"abs\", \"%\"]:\r\n            self.num2_entry.delete(0, tk.END)\r\n            self.num2_entry.config(state=\"disabled\", bg=\"#d3d3d3\")\r\n        else:\r\n            self.num2_entry.config(state=\"normal\", bg=\"white\")\r\n\r\n    def reset_calculator(self):\r\n        self.num1_var.set(\"\")\r\n        self.num2_var.set(\"\")\r\n        self.operation_var.set(\"+\")\r\n        self.result_label.config(text=\"Результат: \")\r\n        self.step_by_step_var.set(\"\")\r\n        self.error_label.config(text=\"\")\r\n        self.num2_entry.config(state=\"normal\", bg=\"white\")\r\n\r\n    def perform_calculation(self):\r\n        self.error_label.config(text=\"\")\r\n        self.step_by_step_var.set(\"\")\r\n        self.root.config(cursor=\"wait\")\r\n        self.root.update()\r\n        time.sleep(0.5)\r\n\r\n        if not self.num1_var.get() or (self.operation_var.get() not in [\"sqrt\", \"cbrt\", \"tan\", \"log\", \"abs\", \"%\"] and not self.num2_var.get()):\r\n            self.error_label.config(text=\"Ошибка: введите числа и выберите операцию!\")\r\n            self.root.config(cursor=\"\")\r\n            return\r\n\r\n        try:\r\n            num1 = self.num1_var.get()\r\n            op = self.operation_var.get()\r\n            steps = []\r\n\r\n            if op == \"sqrt\":\r\n                if float(num1) < 0:\r\n                    raise ValueError(\"Корень из отрицательного числа невозможен\")\r\n                result = math.sqrt(float(num1))\r\n                steps.append(f\"Шаг 1: Берем число {num1}\")\r\n                steps.append(f\"Шаг 2: Извлекаем корень: √{num1} = {result:.2f}\")\r\n            elif op == \"cbrt\":\r\n                num1_float = float(num1)\r\n                if num1_float < 0:\r\n                    result = -math.pow(abs(num1_float), 1/3)\r\n                else:\r\n                    result = math.pow(num1_float, 1/3)\r\n                steps.append(f\"Шаг 1: Берем число {num1}\")\r\n                steps.append(f\"Шаг 2: Извлекаем кубический корень: ∛{num1} ≈ {result:.2f}\")\r\n            elif op == \"tan\":\r\n                num1_float = float(num1)\r\n                result = math.tan(math.radians(num1_float))\r\n                steps.append(f\"Шаг 1: Угол {num1}°\")\r\n                steps.append(f\"Шаг 2: В радианы: {math.radians(num1_float):.2f} рад\")\r\n                steps.append(f\"Шаг 3: tan({math.radians(num1_float):.2f}) = {result:.2f}\")\r\n            elif op == \"log\":\r\n                num1_float = float(num1)\r\n                if num1_float <= 0:\r\n                    raise ValueError(\"Логарифм от неположительного числа невозможен\")\r\n                result = math.log(num1_float)\r\n                steps.append(f\"Шаг 1: Число {num1}\")\r\n                steps.append(f\"Шаг 2: ln({num1}) = {result:.2f}\")\r\n            elif op == \"abs\":\r\n                num1_float = float(num1)\r\n                result = abs(num1_float)\r\n                steps.append(f\"Шаг 1: Число {num1}\")\r\n                steps.append(f\"Шаг 2: |{num1}| = {result:.2f}\")\r\n            elif op == \"%\":\r\n                num1_float = float(num1)\r\n                result = num1_float / 100\r\n                steps.append(f\"Шаг 1: Берем число {num1}\")\r\n                steps.append(f\"Шаг 2: Вычисляем процент: {num1} / 100 = {result:.2f}\")\r\n            else:\r\n                num2 = self.num2_var.get()\r\n                if op == \"+\":\r\n                    result = float(num1) + float(num2)\r\n                    steps.append(f\"Шаг 1: {num1} + {num2}\")\r\n                    steps.append(f\"Шаг 2: {result:.2f}\")\r\n                elif op == \"-\":\r\n                    result = float(num1) - float(num2)\r\n                    steps.append(f\"Шаг 1: {num1} - {num2}\")\r\n                    steps.append(f\"Шаг 2: {result:.2f}\")\r\n                elif op == \"*\":\r\n                    result = float(num1) * float(num2)\r\n                    steps.append(f\"Шаг 1: {num1} * {num2}\")\r\n                    steps.append(f\"Шаг 2: {result:.2f}\")\r\n                elif op == \"/\":\r\n                    num2_float = float(num2)\r\n                    if num2_float == 0:\r\n                        raise ZeroDivisionError(\"Деление на ноль!\")\r\n                    result = float(num1) / num2_float\r\n                    steps.append(f\"Шаг 1: {num1} / {num2}\")\r\n                    steps.append(f\"Шаг 2: {result:.2f}\")\r\n                elif op == \"**\":\r\n                    result = float(num1) ** float(num2)\r\n                    steps.append(f\"Шаг 1: {num1} ^ {num2}\")\r\n                    steps.append(f\"Шаг 2: {result:.2f}\")\r\n\r\n            self.result_label.config(text=f\"Результат: {result:.2f}\")\r\n            self.step_by_step_var.set(\"\\n\".join(steps))\r\n        except ValueError as e:\r\n            self.error_label.config(text=f\"Ошибка: {str(e)}\")\r\n        except ZeroDivisionError as e:\r\n            self.error_label.config(text=f\"Ошибка: {str(e)}\")\r\n        except Exception as e:\r\n            self.error_label.config(text=f\"Ошибка: {str(e)}\")\r\n        finally:\r\n            self.root.config(cursor=\"\")\r\n\r\n    def exit_application(self):\r\n        self.root.quit()\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    app = MetaMathCalculator(root)\r\n    root.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision ca77b90e9743a42494d77490f9e65d127e991993)
+++ b/main.py	(date 1758461377687)
@@ -30,7 +30,7 @@
         # Ввод первого числа (только цифры)
         tk.Label(main_frame, text="Первое число:", font=("Arial", 12), bg="#e0eafc").pack()
         self.num1_entry = tk.Entry(main_frame, textvariable=self.num1_var, width=35, font=("Arial", 12))
-        self.num1_entry.config(validate="key", validatecommand=(self.root.register(self.validate_numeric), "%P"))
+        self.num1_entry.config(validate="key", validatecommand=(self.root.register(self.validate_numeric), "%P")
         self.num1_entry.pack(pady=5)
 
         # Ввод второго числа (только цифры)
